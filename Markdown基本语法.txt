创建于2024.7.25

Markdown 标题语法
    要创建标题,请在单词或短语前面添加井号(#)
    # 的数量代表了标题的级别。
    还可以在文本下方添加任意数量的 == 号来标识一级标题
                            或者 -- 号来标识二级标题
    请用一个空格在 # 和标题之间进行分隔

Markdown 段落语法
    要创建段落,请使用空白行将一行或多行文本进行分隔。
    不要用空格(spaces)或制表符(tabs)缩进段落

Markdown 换行语法
    在一行的末尾添加两个或多个空格,然后按回车键,即可创建一个换行
    或在行尾添加 HTML 的 <br> 标签来实现换行

粗体(Bold)
    要加粗文本,请在单词或短语的前后各添加
    两个星号(**)
    或下划线(__)
    如需加粗一个单词或短语的中间部分用以表示强调的话,
    请在要加粗部分的两侧各添加两个星号
斜体(Italic)
    要用斜体显示文本，请在单词或短语前后
    添加一个星号(*)
    或一个下划线(_)
    要斜体突出单词的中间部分,请在字母前后各添加一个星号

要同时用粗体和斜体突出显示文本,请在单词或短语的前后各添加三个星号或下划线
要加粗并用斜体显示单词或短语的中间部分,请在要突出显示的部分前后各添加三个星号

Markdown 引用语法
    要创建块引用,请在段落前添加一个 > 符号    
多个段落的块引用
    块引用可以包含多个段落,为段落之间的空白行添加一个 > 符号
嵌套块引用
    块引用可以嵌套。在要嵌套的段落前添加一个 >> 符号

Markdown 列表语法
有序列表
    要创建有序列表,请在每个列表项前添加数字并紧跟一个英文句点
    数字不必按数学顺序排列,但是列表应当以数字 1 起始。
无序列表
    要创建无序列表,请在每个列表项前面添加
    破折号 (-)
      星号 (*)
      加号 (+)
    缩进一个或多个列表项可创建嵌套列表。
在列表中嵌套其他元素
    要在保留列表连续性的同时在列表中添加另一种元素,
    请将该元素缩进四个空格或一个制表符

代码块
    代码块通常采用四个空格或一个制表符缩进
    当它们被放在列表中时,请将它们缩进八个空格或两个制表符。

Markdown 代码语法
    要将单词或短语表示为代码,
    请将其包裹在反引号 (`) 中
        转义反引号:双反引号(``)
Markdown 围栏代码块
    在代码块之前和之后的行上使用
    三个反引号(```) 或
    三个波浪号(~~~)
代码块前要添加语言以让它语法高亮
添加 {.line-numbers} 可以显示行号


Markdown 分隔线语法
    要创建分隔线，请在单独一行上使用
    三个或多个星号 (***)
           破折号 (---) 
           下划线 (___)

Markdown 链接语法
    超链接Markdown语法代码:
        [超链接显示名](超链接地址 "超链接title")
    使用尖括号可以很方便地把URL或者email地址变成可点击的链接
    引用类型链接
        引用类型的链接的第一部分使用两组括号进行格式设置
        第一组方括号包围应显示为链接的文本
        第二组括号显示了一个标签,该标签用于指向您存储在文档其他位置的链接。
            [标题1](#jump1)
        如果标题中有空格和特殊字符，按照下面的规则进行处理：
            大写字母改成小写
            特殊字符全删除
            空格改成横线（-）


Markdown 图片语法
    插入图片Markdown语法代码:
        ![图片alt](图片链接 "图片title")
    要添加图像，请使用感叹号 (!),
    然后在方括号增加替代文本,
    图片链接放在圆括号里,
    括号里的链接后可以增加一个可选的图片标题文本。
    链接图片:
        略

Markdown 表格
    要添加表，请使用三个或多个连字符（---）创建每列的标题，
    并使用管道（|）分隔每列。
    您可以选择在表的任一端添加管道。

    | Syntax      | Description |
    | ----------- | ----------- |
    | Header      | Title       |
    | Paragraph   | Text        |

    可使用Markdown Tables Generator构建表，然后复制回文件中

标记
    使用两个等号“== ==”包住可形成标记，黄底黑字的那种










Mermaid 绘画使用
详见 https://blog.csdn.net/qq_57508808/article/details/136110461

在 Markdown 中使用 Mermaid 需要在代码块中声明语法
    ~~~mermaid

    ~~~

Mermaid 中包含了 12 种可以使用的图标定义结构
分别是：流程图、时序图、类图、状态图、实体关系图、用户行程图、甘特图
        饼图、需求图、Git分枝可视化、思维导图、ZenUML图

流程图
告诉 Mermaid 下列语法是什么图像
可以用flowchart或graph声明流程图类型
告诉 Mermaid 流程图的排列方向
其中：
    L代表Left左边、
    R代表Right右边、
    T代表Top上面、
    B代表Bottom下面，
    顺序为左边的字母到右边的字母

  ```mermaid
      flowchart TB
        subgraph 从左到右
          direction LR
          声明图像类型1 --> 声明排列方向1 --> 声明图像内容1
        end
        subgraph 从右到左
          direction RL
          声明图像类型2 --> 声明排列方向2 --> 声明图像内容2
        end
        subgraph 上下分明
          direction LR
          subgraph 从上到下
            direction TB
            声明图像类型3 --> 声明排列方向3 --> 声明图像内容3
          end
          subgraph 从下到上
            direction BT
            声明图像类型4 --> 声明排列方向4 --> 声明图像内容4
          end
          从上到下 --> 从下到上
        end
        从左到右 --> 从右到左 --> 上下分明
    ```
有两种声明节点的方式
直接声明：
    直接在连接声明区域声明节点，此时节点名字作为节点内容，节点样式采用默认样式（即[]样式）
完整声明：
    使用节点名字[节点内容]声明节点，其中的[]代表节点样式，可以改变它以改变节点样式

完整声明中的节点内容可以使用Unicode 字符或Markdown 语法
    使用Unicode 字符时应该将节点内容以" "包裹
    使用Markdown 语法时应该将节点内容以"` `"包裹

每个节点名字都是唯一的
```mermaid
      graph TB
        subgraph 直接声明
          direction LR
          普通节点1 --> 普通节点2 --> 普通节点3
        end
        subgraph 完整声明
          普通节点[这是一个普通节点]
          Unicode节点["🐳Unicode节点"]
          Markdown节点["`**第一行**  
          *第二行*  
          ***第三行***`"]
          普通节点 --> Unicode节点 --> Markdown节点
        end
        直接声明 --> 完整声明
  ```

在介绍完整声明时有提到过可以自定义节点样式，例如使用[ ]包裹节点内容就代表这个节点是默认样式
我们除了默认样式外，Mermaid 还可以定义其它很多的节点样式  
因为是txt就没有图了

节点样式    样式语法    节点样式    样式语法    节点样式    样式语法
默认        [文本]      圆边        (文本)      胶囊        ([文本])
子程序      [[文本]]    圆柱        [(文本)]    圆形        ((文本))
六边形      {{文本}}    棱形        {文本}      正四边形    [/文本/]
反四边形    [\文本\]    正梯形      [/文本\]    反梯形      [\文本/]
旗帜        >文本]      双圆        (((文本)))

声明节点间的连接
声明节点间的连接使得有关联的节点能被 Mermaid 识别并绘制连接线
    声明单个连接语法A --> B能够声明一条 A 到 B 链接
    声明多个连接语法A --> B --> C能够声明A 到 B、B 到 C 共两条链接
    多个节点聚合声明语法A & B --> C能够对多个节点进行操作声明 A 到 C、B 到 C 共两条链接
```mermaid
      graph LR
        A --单连接声明--> B
        B --多连接声明--> C --多连接声明--> D
        D --多节点聚合--> E & F --多节点聚合--> A
```

调整链接的长度
在某些情况下，可以大致定义链接的长度而改善 Mermaid 画出的图形
Mermaid 内可以定义链接跨越的级数以调整链接长度
想要跨越多少级数，只需要在正常的连接符号上加入对应数量的-、.、=等符号即可
 ```mermaid
      graph LR
        subgraph 没调整链接长度之前
          direction TB
          %% A --> B 的链接声明是正常的
          A --> B --> D
          D --> E
          E --> B
        end
        subgraph 调整了链接长度之后
          direction TB
          %% A ---> B 的链接声明多了一个 - 符号
          %% 代表着跨1个级别
          A1 ---> B1 --> D1
          D1 --> E1
          E1 --> B1
        end
        没调整链接长度之前 --调整了A到B的跨级为1--> 调整了链接长度之后
  ```

调整链接的样式
前面举例所使用的链接样式都是-->代表着有向箭头，Mermaid 内还拥有其它很多链接样式
因为没有图所以我只描述一下
样式语法    样式效果                    样式语法        样式效果            样式语法        样式效果           样式语法         样式效果 
A --- B     AB间直线连接                B --标签-- C    BC间添加文字标签    C --> D         普通箭头连接        D --标签-->E    D 箭头标签连向 E
E <--> F    E处大箭头,F处小箭头连接     F -.-> G        FG间用虚线连接      G-.标签.-> H    虚线箭头标签连接     H <-.-> I      虚线,H处 大箭头,I处小箭头
J ==> K     J粗实线箭头指向K            K ==标签==>L     KL间粗实线和标签   L --o M         L 连向 M,M处为圆点  M o--o N        MN 双向圆点连接
N --x O     N连向O,O处为叉×             O x--x P        OP间双向叉×连接

注释
让文本以%%开头可以将文本标记为 Mermaid 注释

子流程图
在流程图的里面可以嵌入子流程图，子流程图内仍旧可以嵌入子流程图
将子流程图当成一个整体看待的话，它的行为和普通节点基本一致
子流程图的声明语法如下
subgraph 子流程图名字[子流程图文本内容（标题）]
    direction 子流程图方向
    子流程图具体信息
end

事件交互
我们可以把页面跳转或是js函数捆绑在节点的点击事件上
这样就能够有一些交互性，这两者的用法和 HTML 差不多
语法如下
<!--页面跳转-->
  click 节点名字 href "网址" "注释" 打开方式
  <!--函数捆绑-->
  <!--先定义一个函数-->
  <script>
    const callback = function(){
      alert("Function running!");
    };
  </script>
  <!--然后把这个函数引进 Mermaid 并将它和节点捆绑-->
  click 节点名字 callback "注释"
  click 节点名字 call callback() "注释"

示例如下
```mermaid
    graph LR
      A --> B --> C
      click A callback "引入函数"
      click A call callback() "捆绑函数到节点A的点击事件"
      click B href "https://www.github.com" "前往GitHub" _blank
  ```
由于在他人网页上我们没有定义js脚本的权限，所以点击A节点什么事情都不会发生
但如果你是在浏览器上点击B或C节点，就会跳转到GitHub网页

节点样式的定义
由于节点有独一无二的节点名字，当要修改节点样式时，可以根据节点名字定位节点位置
定义节点样式语法如下
style 节点名字 fill:#000, stroke:#000, stroke-width:0px, color:#000

为节点添加类以定义样式
可以将某些样式和某一类节点绑定在一起，方便管理
Mermaid 中定义类的语法如下
classDef 类的名字 fill:#000, stroke:#000, stroke-width:0px, color:#000

将节点和类绑定的语法如下
<!--绑定单个节点到类-->
class 节点名字 类的名字
<!--绑定多个节点到类-->
class 节点名字1,节点名字2 类的名字
<!--添加节点到类的简约写法-->
节点名字:::类的名字
示例
A:::MyClass --> B


时序图

可以在时序图开头声明该时序图的参与者并给它们取别名
    以默认样式声明参与者participant 别名 as 展示名
    以角色样式声明参与者actor 别名 as 展示名
在声明链接时，使用的是别名
在声明参与者时也可以不设置别名，此时别名和展示名一致
```mermaid
    sequenceDiagram
      participant 机构A as 大学校园
      actor 学生A as 小明
      机构A ->> 学生A: 发送学业警告书
      学生A ->> 机构A: 回复收到
```

参与者分组
可以利用box 颜色 组名 + 声明参与者 + end给参与者分组
其中颜色可以使用rgb(hex,hex,hex)定义，也可以使用英文的颜色单词
```mermaid
    sequenceDiagram
      box Yellow 饭店
      participant A as 后厨
      actor B as 服务员
      end
      box rgb(250,50,250) 客人
      actor C as 上司
      actor D as 下属
      end
      D ->> C: 老板要吃什么
      C ->> D: 吃红烧排骨
      D ->> B: 靓仔，一份红烧排骨
      B ->> A: 红烧排骨一份
      A ->> B: 排骨好了
      B 
```

链接声明
时序图的链接，就是行为传递，语法如下
参与者1 链接样式 参与者2: 传递信息、行为
链接样式共有八种
样式语法	样式描述	        样式语法	样式描述
->	        没箭头实线	         ->>	    有箭头实线
-->	        没箭头虚线	         -->>	    有箭头虚线
-x	        末端十字实线	     --x	    末端十字虚线
-)	        末端空心箭头实线	  --)	    末端空心箭头虚线
  ```mermaid
    sequenceDiagram
      participant A as 小明
      participant B as 小李
      A -> B: 没箭头实线
      A ->> B: 有箭头实线
      A --> B: 没箭头虚线
      A -->> B: 有箭头虚线
      A -x B: 末端十字实线
      A --x B: 末端十字虚线
      A -) B: 末端空心箭头实线
      A --) B: 末端空心箭头虚线
  ```

添加标签信息
通过语法Note right of或left of或over 参与者: 标签文本可以添加标签
其中 left of right of可以在单个参与者的左边或右边添加标签信息
over可以在多个参与者之间添加标签信息
```mermaid
    sequenceDiagram
      participant A as 小明
      participant B as 小李
      Note left of A: 小明很饿
      A ->> B: 去不去吃饭
      Note over A,B: 小明邀请小李吃饭
      B ->> A: 我还不饿
      Note over A,B: 小李谢绝了
      Note right of B: 小李很饱
```

循环
通过语法loop 循环名字 + 具体事件 + end为序列图添加循环
```mermaid
    sequenceDiagram
      participant A as 小明
      participant B as 小李
      A ->> B: 接下来每分钟给我发一条“你好”
      loop 每过一分钟
        B ->> A: 你好
      end
```

条件语句
序列图中有两种条件语句，一种是类似if else类型的，另一种是类似switch case类型的
它们的语法如下
A ->> B: xxxx
  alt 情况描述1
    B ->> A: 描述1对应的xxxx
  else 情况描述2
    B ->> A: 描述2对应的xxxx
  end
  opt 什么什么情况
    B ->> A: 对应的xxxx
end
示例如下所示
```mermaid
    sequenceDiagram
      participant A as 小明
      participant B as 小李
      A ->> B: 小李下班有没有事
      alt 没有事
        B ->> A: 没事，怎么了
        A ->> B: 那去吃饭吧
      else 有事
        B ->> A: 我下班还有其它事要做
        A ->> B: 没事，你先忙
      end
      opt 不确定有没有事
        B ->> A: 我也不确定啊
        A ->> B: 那到时候再说吧
      end
```
平行发生声明
表示声明内发生的事情是同时发生的，这个声明可以嵌套以表述多个事件同时发生
语法如下
par 情况描述
  A -> B: XXXX
and 情况描述
  A -> C: XXXX
end
示例如下所示
```mermaid
    sequenceDiagram
      participant A as 小明
      participant B as 小李
      participant C as 小红
      par 大声聊天
        A ->> B: 最近新开的饭店不错
      and 发短信
        A ->> C: 下班要不要一起去新开的饭店
      and
        par 大声聊天
          B ->> A: 对啊，我上次也去吃过了
        and 发短信
          B ->> C: 下班要不要一起去新开的饭店
        end
      end
      par 发短信
        C ->> A: 不用了
        C ->> B: 不用了
      end
```

关键步骤声明
可以在时序图中定义一些必不可少的步骤，也就是必须完成的步骤
语法如下
sequenceDiagram
  critical 描述xxx
    发生行为
  option 情况xxx
    应对xxx情况的处理行为
  end
示例如下
```mermaid
    sequenceDiagram
      participant A as 商店
      actor B as 顾客
      critical 买东西必须要付钱
        A ->> B: 商品
        B ->> A: 钞票
      option 没钱
        A ->> B: 没钱不卖东西
      end
```

空窗期定义
可以定义空窗期以在某段时间内停止序列的进行，这个空窗期通常用来表示处理一些事件
语法如下
sequenceDiagram
    break 发生了事件xxx
      空窗期内发生的行为、
    end
示例如下
```mermaid
    sequenceDiagram
      participant bank as 银行
      participant database as 数据库
      actor consumer as 顾客
      consumer ->> bank: 我卡里还有多少钱
      bank -->> consumer: 正在查询
      break 查找银行卡的余额
        bank ->> database: 请求数据
        database -->> bank: 返回数据
      end
      bank -->> consumer: 卡里还有xxxx元
  ```

定义背景颜色
可以为一个行为或多个行为定义背景颜色，可使用rgb(hex,hex,hex)定义具体颜色
语法如下
rect rgb(hex,hex,hex)
  行为
  end
示例如下
```mermaid
    sequenceDiagram
      actor driver as 司机
      actor passenger as 乘客
      rect rgb(0, 200, 0)
      driver ->> passenger: 是尾号1234的乘客吗
      rect rgb(50, 150, 200)
      passenger ->> driver: 对
      end
      driver ->> passenger: 上车吧
      end
  ```

为行为添加序列号
只需要输入autonumber即可
示例
```mermaid
    sequenceDiagram
      autonumber
      A ->> B: 身体怎么样
      B ->> B: 自检中
      B ->> A: 身体还不错
      B ->> C: 你的身体怎么样
      C ->> B: 也还可以
  ```

饼图
饼图能够很好的对比占有部分大小
在 Mermaid 中定义饼图很简单，只需如下语法
showData 是可选的，填上以后数字会被显示在标签以后
pie showData
    title 图表标题
    "标签1" : 数字1
    "标签2" : 数字2
示例
```mermaid
    pie showData
      title 一天都在干什么
      "学习" : 12
      "睡觉" : 9
      "其它" : 3
```

